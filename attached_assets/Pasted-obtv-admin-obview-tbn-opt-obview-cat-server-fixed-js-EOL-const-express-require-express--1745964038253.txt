obtv-admin@obview-tbn:/opt/obview$ cat > server-fixed.js << EOL
const express = require('express');
const { Pool } = require('pg');
const session = require('express-session');
const path = require('path');
const fs = require('fs');
// Create Express app
const app = express();
app.use(express.json());
// Session middleware
app.use(session({
  secret: process.env.SESSION_SECRET || 'default-secret',
  resave: false,
  saveUninitialized: false
}));
// Database connection
console.log('Connecting to database...');
const pool = new Pool({
  connectionString: 'postgresql://obviewuser:tbn123456789@localhost:5432/obview',
  max: 10
});
// Authentication middleware
function isAuthenticated(req, res, next) {
  if (req.session.user) {
    next();
  } else {
    res.status(401).json({ message: 'Not authenticated' });
  }
}
// API routes
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    console.log(\`Login attempt for user: \${username}\`);

    // Query the users_view which has both column naming styles
    const result = await pool.query(
      'SELECT id, username, password, email, name, role FROM users_view WHERE username = $1',
      [username]
    );

    if (result.rows.length === 0) {
      console.log(\`User not found: \${username}\`);
      return res.status(401).json({ message: 'Invalid username or password' });
    }

    const user = result.rows[0];

    // For this test, we'll accept any password
    // In production, you'd verify the password hash
    console.log(\`User authenticated: \${username}\`);

    // Store user in session
    req.session.user = {
      id: user.id,
      username: user.username,
      email: user.email,
      name: user.name,
      role: user.role
    };

    res.json({
      id: user.id,
      username: user.username,
      email: user.email,
      name: user.name,
      role: user.role
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});
app.get('/api/user', isAuthenticated, (req, res) => {
  res.json(req.session.user);
});
app.post('/api/logout', (req, res) => {
  req.session.destroy();
EOLonsole.log(\`Server running on http://0.0.0.0:\${PORT}\`);'));x.html'))) {;
obtv-admin@obview-tbn:/opt/obview$ ls
DEPLOYMENT.md              attached_assets  dist                init-scripts       postcss.config.js  tailwind.config.ts
DOCKER_TROUBLESHOOTING.md  cleanup.sh       docker-compose.yml  migrations         scripts            test-project.html
Dockerfile                 client           drizzle             node_modules       server             tsconfig.json
Dockerfile.bak             components.json  drizzle.config.ts   package-lock.json  server-fixed.js    uploads
Dockerfile.debug           cookies.txt      generated-icon.png  package.json       shared             vite.config.ts
obtv-admin@obview-tbn:/opt/obview$ node server-fixed.js
file:///opt/obview/server-fixed.js:1
const express = require('express');
                ^

ReferenceError: require is not defined in ES module scope, you can use import instead
This file is being treated as an ES module because it has a '.js' file extension and '/opt/obview/package.json' contains "type": "module". To treat it as a CommonJS script, rename it to use the '.cjs' file extension.
    at file:///opt/obview/server-fixed.js:1:17
    at ModuleJob.run (node:internal/modules/esm/module_job:263:25)
    at async ModuleLoader.import (node:internal/modules/esm/loader:540:24)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)

Node.js v20.19.1
obtv-admin@obview-tbn:/opt/obview$